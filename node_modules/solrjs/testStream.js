var request = require('request')
  , JSONStream = require('JSONStream')
  , es = require('event-stream')
  , Path = require('path')
  , Stream = require('stream')
  , util = require("util");

var maxPerReq=100;
var limitre = /(&rows=)(\d*)/;
var startre= /(&start=)(\d*)/;
var solrhost = "http://harad.vbi.vt.edu:8983/solr/";
var collection = process.argv[2];
var query = process.argv[3];

var totalReqLimit;
var rows;

var limitMatch = query.match(limitre);

if (limitMatch){
	console.log("limitMatch: ", limitMatch);
	var totalReqLimit=limitMatch[2];
}

if (totalReqLimit>maxPerReq){
	rows=maxPerReq;
	query = query.replace(limitre,"&rows=" + rows);
}else{
	rows=totalReqLimit;
}


console.log("Updated Query: ", query);
var currentCount=0;
var firstReq=true;
var streamHasEnded=false;

function doRequest(query,stream,callback,cursorMark){
	if (!cursorMark){
		cursorMark="*"
	}

	console.log("doRequest:", query, "Cursor Mark: ", cursorMark);
	var dq = query + "&start=0&wt=json&cursorMark=" + cursorMark;
	var url = solrhost + Path.join(collection,"select?"+dq); 
	console.log("SOLR URL: ", url);
	request({url:url,json:true}, function(err,res,data){
		if (cursorMark=="*"){
			var header = {response:{}}
			if (data.responseHeader) {
				header.responseHeader = data.responseHeader;
			}

			Object.keys(data.response).forEach(function(key){
		                if (key=="docs") { return; }
				header.response[key]=data.response[key];
			});

			stream.emit("data",header);
//			console.log("PUSH INTO STREAM: ", header);
		}

		if (data.nextCursorMark){
			console.log("Got Next CursorMark: ", data.response.nextCursorMark);
			if (data.response.docs){
				data.response.docs.forEach(function(doc){
				//	console.log("PUSH DATA INTO STREAM: ", doc);
					if (currentCount++ < totalReqLimit) {
						stream.emit("data",doc);
					}
					
				});
				if (currentCount < totalReqLimit) {
					doRequest(query,stream,callback,data.nextCursorMark);
				}else{
					stream.emit("end");	
					callback();
				}
			}else{
				console.log("NO DOCS: ",data);
				stream.emit('end');
				callback();
			}

		}else{
			console.log("No Next CursorMark");
			if (data.response.docs){
				data.response.docs.forEach(function(doc){
					console.log("PUSH DATA INTO STREAM: ", doc);
					stream.emit("data",doc);
				});
				stream.emit('end');
				callback();
			}else{
				console.log("NO DOCS: ",data);
				stream.emit('end');
				callback();
			}
		}
	});	
}

//DataStream = function(opts){
//	Stream.Readable.call(this,opts);
//	this.query = opts.query;
//}
//util.inherits(DataStream, Stream.Readable);


var launch=function(query){
	var head;
	var count=0;
	var stream = new es.readable(function(count,callback){
		doRequest(query,this,callback);
	});

	//doRequest(query,stream);

	stream.pipe(es.mapSync(function(data){
		//console.log("DATA: ", data);
		if (!head){
			head = data;
		}else{
			count++;
			console.log(JSON.stringify(data));
		}
		return data;
	})).on('end', function(){
		console.log("head: ", head);
		console.log("Doc Count: ", count);
	});
}

launch(query);
